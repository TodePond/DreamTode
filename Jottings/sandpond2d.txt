//===========//
// Constants //
//===========//
let SPACE_SIZE = 30
let WORLD_WIDTH = 50
let WORLD_HEIGHT = 50

//============//
// Structures //
//============//
let Element = {
	name: String
	categories: String[] = ()
	colour: Colour = "grey"
	visible: Bool = true
	behave: Function = {atom, space} => ()
}

let Atom = {
	element: &Element = &Empty
}

let Space = {
	atom: Atom = new Atom()
	below: &Space
}

//==========//
// Elements //
//==========//
let Empty = new Element [
	name = "Empty"
	visible = false
]

let Sand = new Element [
	name = "Sand"
	categories = "Sandbox"
	colour = "#FC0"
	behave = {atom, space} => (
		if space.below.atom.element == Empty (
			space.atom = space.below.atom
			space.below.atom = atom
		)
	)
]

//=========//
// Globals //
//=========//
let spaces: Space[WORLD_WIDTH][WORLD_HEIGHT]
for {x, y} in spaces (
	if y+1 >= WORLD_HEIGHT, continue
	spaces[x][y].below = &(spaces[x][y+1])
)

let spacesReversed: &Space[WORLD_WIDTH][WORLD_HEIGHT]
for {x, y} in spacesReversed (
	spacesReversed[x][y] = &(spaces[x][WORLD_HEIGHT - y])
)

//===========//
// Rendering //
//===========//
let canvas = $"canvas"
let context = canvas.getContext "2d"
canvas.style.position = "fixed"
canvas.style.top = 0
canvas.style.left = 0

let resize = {} => (
	canvas.width = window.innerWidth
	canvas.height = window.innerHeight
	canvas.style.width = "$(window.innerWidth)px"
	canvas.style.height = "$(window.innerHeight)px"
)

on window "resize", resize

let drawSpace = {element, x, y} => (
	context.fillStyle = element.colour
	context.fillRect(x * SPACE_SIZE, y * SPACE_SIZE, SPACE_SIZE, SPACE_SIZE)
)

let render = {} => (
	for {x, y} in spacesReversed (
		let space = spaces[x][y]
		let atom = space.atom
		let element = space.atom.element
		element.behave(atom, space)
		drawSpace(element, x, y)
	)
)
